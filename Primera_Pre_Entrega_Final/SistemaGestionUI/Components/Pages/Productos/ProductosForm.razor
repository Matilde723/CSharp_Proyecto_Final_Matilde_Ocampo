@page "/productos-form"
@using SistemaGestionBussiness.Services
@inject NavigationManager NavigationManager
@inject ProductoService Service  

<EditForm Model="Producto" OnValidSubmit="CrearOActualizarProducto" FormName="productos-form">
    <!-- Validation components -->
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="descripcion">Descripcion</label>
        <InputText type="text" class="form-control" id="descripcion" @bind-Value="Producto.Descripcion" />
    </div>

    <div class="form-group">
        <label for="precio-compra">Precio compra</label>
        <InputNumber type="number" class="form-control" id="precio-compra" @bind-Value="Producto.PrecioCompra" />
    </div>

    <div class="form-group">
        <label for="precioVenta">Precio de Venta</label>
        <InputNumber type="number" class="form-control" id="precioVenta" @bind-Value="Producto.PrecioVenta" />
    </div>

    <div class="form-group">
        <label for="stock">Stock</label>
        <InputNumber type="number" class="form-control" id="stock" @bind-Value="Producto.Stock" />
    </div>

    <div class="form-group">
        <label for="totalProducto">Total Producto</label>
        <InputNumber type="number" class="form-control" id="totalProducto" @bind-Value="Producto.TotalProducto" />
    </div>

    <div class="form-group">
        <label for="categoria">Categoria</label>
        <InputText type="text" class="form-control" id="categoria" @bind-Value="Producto.Categoria" />
    </div>

    <button type="submit" class="btn btn-primary">Guardar</button>

</EditForm>

@code {
    [Parameter]
    public Producto Producto { get; set; } = new Producto(); // Initialize a new product by default

    protected override void OnInitialized()
    {
        // Optionally, load an existing product for editing
        // Example: LoadProducto(id);
    }

    public async Task CrearOActualizarProducto()
    {
        if (Producto.Id > 0)
        {
            // Call the service to update the product
            try
            {
                await Service.UpdateProducto(Producto.Id, Producto);
            }
            catch (Exception ex)
            {
                // Handle any exceptions that occur during updating
                throw new Exception($"Error updating product: {ex.Message}");
            }
        }
        else
        {
            // Call the service to create a new product
            try
            {
                await Service.InsertProducto(Producto);
            }
            catch (Exception ex)
            {
                // Handle any exceptions that occur during creation
                throw new Exception($"Error creating product: {ex.Message}");
            }
        }

        // Navigate back to the products list page after saving
        NavigationManager.NavigateTo("/productos");
    }
}
